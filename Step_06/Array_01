//https://stepik.org/lesson/563/step/6?unit=886

/*Реализуйте шаблонную версию класса Array. Список всех операций, которые должен поддерживать класс Array, приведен в шаблоне кода.*/

#include <cstddef>
template <typename T>
class Array
{
     public:
     explicit Array(size_t size = 0, const T& value = T())  //explicit Array(size_t size = 0, const T& value = T())
         {
         size_ = size;
         data_ = new T[size];
         for(size_t i = 0; i < size; ++i)
             {
             data_[i] = value;
             }
         }
    //   конструктор класса, который создает Array размера size, заполненный значениями
    //   value типа T. Считайте что у типа T есть конструктор, который можно вызвать без параметров, либо он ему не нужен.        
     Array(const Array & a)
         {
         size_ = a.size();
         data_ = new T[size_];
         for(size_t i = 0; i < size_; ++i)
             {
             this->data_[i] = a.data_[i];
             }
         }    
    //   конструктор копирования, который создает копию параметра. Считайте, что для типа T определен оператор присваивания.
        
     ~Array()
         {
         delete[] data_;
         }
    //   деструктор, если он вам необходим.
    Array &operator=(const Array & a)
        {
        if (this != &a) // проверка попытки присвоить массив самому себе, если нет, то удаляем старый
            {
            delete[] this->data_;
            this->size_ = a.size();
            this->data_ = new T[size_];
            for (size_t i = 0; i < size_; ++i)
            this->data_[i] = a.data_[i];
            }
        return *this; 
    }
    //   оператор присваивания.
    
    // геттер неконстантного массива
    size_t size()
    {
        return size_;
    }
    // геттер размера константного массива
    size_t size() const
    {
        return size_;
    }
    
     T& operator[](size_t i)
         {
         return data_[i];
         }
    
     const T& operator[](size_t i) const
         {
         return data_[i];
         }
    //   две версии оператора доступа по индексу.

private:
    size_t size_;
    T * data_;    
};
